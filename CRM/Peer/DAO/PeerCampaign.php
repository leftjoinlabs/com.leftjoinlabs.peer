<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2018
 *
 * Generated from /home/sean/buildkit/build/ext/sites/default/files/civicrm/ext/com.leftjoinlabs.peer/xml/schema/CRM/Peer/PeerCampaign.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:e7e834a92321c1ce06fee2b2390bf1ef)
 */

/**
 * Database access object for the PeerCampaign entity.
 */
class CRM_Peer_DAO_PeerCampaign extends CRM_Core_DAO {

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  static $_tableName = 'civicrm_peer_campaign';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  static $_log = TRUE;

  /**
   * Unique PeerCampaign ID
   *
   * @var int unsigned
   */
  public $id;

  /**
   * The type of entity that this campaign's peer pages are trying to get people to interact with
   *
   * @var string
   */
  public $target_entity_table;

  /**
   * The ID for the entity that this campaign's peer pages are trying to get people to interact with
   *
   * @var int unsigned
   */
  public $target_entity_id;

  /**
   * FK to civicrm_uf_group.id to set the profile used when creating a new peer page
   *
   * @var int unsigned
   */
  public $supporter_profile_id;

  /**
   * Is Peer Campaign Page Block enabled/active?
   *
   * @var boolean
   */
  public $is_active;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_peer_campaign';
    parent::__construct();
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static ::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'supporter_profile_id', 'civicrm_uf_group', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Dynamic(self::getTableName(), 'target_entity_id', NULL, 'id', 'target_entity_table');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Unique PeerCampaign ID',
          'required' => TRUE,
          'table_name' => 'civicrm_peer_campaign',
          'entity' => 'PeerCampaign',
          'bao' => 'CRM_Peer_DAO_PeerCampaign',
          'localizable' => 0,
        ],
        'target_entity_table' => [
          'name' => 'target_entity_table',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Target Entity Table'),
          'description' => 'The type of entity that this campaign\'s peer pages are trying to get people to interact with',
          'required' => TRUE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'default' => 'civicrm_contribution_page',
          'table_name' => 'civicrm_peer_campaign',
          'entity' => 'PeerCampaign',
          'bao' => 'CRM_Peer_DAO_PeerCampaign',
          'localizable' => 0,
          'pseudoconstant' => [
            'callback' => 'CRM_Peer_BAO_PeerCampaign::entityTableOptions',
          ]
        ],
        'target_entity_id' => [
          'name' => 'target_entity_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Target Entity ID'),
          'description' => 'The ID for the entity that this campaign\'s peer pages are trying to get people to interact with',
          'required' => TRUE,
          'table_name' => 'civicrm_peer_campaign',
          'entity' => 'PeerCampaign',
          'bao' => 'CRM_Peer_DAO_PeerCampaign',
          'localizable' => 0,
        ],
        'supporter_profile_id' => [
          'name' => 'supporter_profile_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Supporter Profile'),
          'description' => 'FK to civicrm_uf_group.id to set the profile used when creating a new peer page',
          'default' => 'NULL',
          'table_name' => 'civicrm_peer_campaign',
          'entity' => 'PeerCampaign',
          'bao' => 'CRM_Peer_DAO_PeerCampaign',
          'localizable' => 0,
        ],
        'is_active' => [
          'name' => 'is_active',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Enabled?'),
          'description' => 'Is Peer Campaign Page Block enabled/active?',
          'required' => TRUE,
          'default' => '1',
          'table_name' => 'civicrm_peer_campaign',
          'entity' => 'PeerCampaign',
          'bao' => 'CRM_Peer_DAO_PeerCampaign',
          'localizable' => 0,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'peer_campaign', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'peer_campaign', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'index_target_entity_table_target_entity_id' => [
        'name' => 'index_target_entity_table_target_entity_id',
        'field' => [
          0 => 'target_entity_table',
          1 => 'target_entity_id',
        ],
        'localizable' => FALSE,
        'unique' => TRUE,
        'sig' => 'civicrm_peer_campaign::1::target_entity_table::target_entity_id',
      ],
      'index_is_active' => [
        'name' => 'index_is_active',
        'field' => [
          0 => 'is_active',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_peer_campaign::0::is_active',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
